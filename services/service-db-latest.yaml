# This is a sample, non-production-ready template.
#
# © 2019 Amazon Web Services, In​c. or its affiliates. All Rights Reserved.
#
# This AWS Content is provided subject to the terms of the
# AWS Customer Agreement available at http://aws.amazon.com/agreement
# or other written agreement between Customer and either
# Amazon Web Services, Inc. or Amazon Web Services EMEA SARL or both.

AWSTemplateFormatVersion: '2010-09-09'
Description: RDS Backing Service
Parameters:

  ServiceBindings:
    Description: Comma-separated list for role names to add permissions to
    Type: String

  DatabaseEngine:
    Type: String
    Description: Engine for database
    Default: aurora

  DatabaseEngineMode:
    Type: String
    Description: Engine mode for database
    Default: provisioned

  SecondsUntilAutoPause:
    Type: Number
    Description: Seconds before auto pause
    Default: 300

  ScalingMaxCapacity:
    Type: Number
    Description: Max number of database units
    Default: 256

  ScalingMinCapacity:
    Type: Number
    Description: Min number of database units
    Default: 2

  DatabaseInstanceClass:
    Type: String
    Description: Instance class for database
    Default: db.t2.small

  DatabaseMasterUsername:
    Type: String
    NoEcho: true
    Description: Username of database

  DatabaseName:
    Type: String
    Description: Name of database

  DatabaseMasterPassword:
    Type: String
    NoEcho: true
    Description: Password of database
    
  DatabaseStorage:
    Type: Number
    Description: Allocated storage for DB
    Default: 100

  VpcId:
    Type: String
    Description: Name of the value to import for the VpcId
    
  InstanceSubnetIds:
    Type: String
    Description: Name of the value to import for the subnet ids

  InstanceSecurityGroup:
    Type: String
    Description: Name of the value to import for the security group id

  DatabaseKeyArn:
    Type: String
    Description: KMS key for Database

Conditions:
  IsServerless:
    "Fn::Equals":
      - !Ref DatabaseEngineMode
      - 'serverless'
  IsClustered:
    "Fn::Or":
      - "Fn::Equals":
          - !Ref DatabaseEngine
          - 'aurora-postgresql'
      - "Fn::Equals":
          - !Ref DatabaseEngine
          - 'aurora'
      - "Fn::Equals":
          - !Ref DatabaseEngine
          - 'aurora-mysql'
  IsStandalone:
    "Fn::Not":
      - !Condition IsClustered
  IsClusterProvisioned:
    "Fn::And":
    - !Condition IsClustered
    - "Fn::Equals":
        - !Ref DatabaseEngineMode
        - 'provisioned'
  IsServerlessAutoPause:
    "Fn::Not":
    - "Fn::Equals":
        - !Ref SecondsUntilAutoPause
        - '0'
Resources:
  DBSubnetsGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: DB subnets
      SubnetIds:
        Fn::Split:
        - ","
        - Fn::ImportValue: !Sub ${InstanceSubnetIds}
  DBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: DB security groups
      VpcId:
        Fn::ImportValue: !Sub ${VpcId}
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '5432'
          ToPort: '5432'
          SourceSecurityGroupId:
            Fn::ImportValue: !Sub ${InstanceSecurityGroup}
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          SourceSecurityGroupId:
            Fn::ImportValue: !Sub ${InstanceSecurityGroup}
        - IpProtocol: tcp
          FromPort: '1433'
          ToPort: '1433'
          SourceSecurityGroupId:
            Fn::ImportValue: !Sub ${InstanceSecurityGroup}
        - IpProtocol: tcp
          FromPort: '1521'
          ToPort: '1521'
          SourceSecurityGroupId:
            Fn::ImportValue: !Sub ${InstanceSecurityGroup}
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: '127.0.0.1/32'
  DBCluster:
    Type: AWS::RDS::DBCluster
    Condition: IsClustered
    Properties:
      DatabaseName: !Ref DatabaseName
      DBSubnetGroupName: !Ref DBSubnetsGroup
      Engine: !Ref DatabaseEngine
      EngineMode: !Ref DatabaseEngineMode
      KmsKeyId: !Ref DatabaseKeyArn
      StorageEncrypted: true
      ScalingConfiguration:
        Fn::If:
        - IsServerless
        - MaxCapacity: !Ref ScalingMaxCapacity
          MinCapacity: !Ref ScalingMinCapacity
          SecondsUntilAutoPause: !Ref SecondsUntilAutoPause
          AutoPause:
            Fn::If:
            - IsServerlessAutoPause
            - 'true'
            - 'false'
        - !Ref AWS::NoValue
      MasterUsername: !Ref DatabaseMasterUsername
      MasterUserPassword: !Ref DatabaseMasterPassword
      Tags:
      - Key: Name
        Value: !Ref DatabaseName
      VpcSecurityGroupIds:
      - Ref: DBSecurityGroup
    DeletionPolicy: Snapshot
  DBInstanceClustered:
    Type: AWS::RDS::DBInstance
    Condition: IsClusterProvisioned
    Properties:
      PubliclyAccessible: false
      DBClusterIdentifier: !Ref DBCluster
      DBInstanceClass: !Ref DatabaseInstanceClass
      DBSubnetGroupName: !Ref DBSubnetsGroup
      Engine: !Ref DatabaseEngine
      Tags:
      - Key: Name
        Value: !Ref DatabaseName
  DBInstanceStandalone:
    Type: AWS::RDS::DBInstance
    Condition: IsStandalone
    Properties:
      PubliclyAccessible: false
      AllocatedStorage: !Ref DatabaseStorage
      KmsKeyId: !Ref DatabaseKeyArn
      StorageEncrypted: true
      StorageType: gp2
      DBName: !Sub ${DatabaseName}
      DBInstanceClass: !Ref DatabaseInstanceClass
      DBSubnetGroupName: !Ref DBSubnetsGroup
      VPCSecurityGroups:
      - Ref: DBSecurityGroup
      Engine: !Ref DatabaseEngine
      MasterUsername: !Ref DatabaseMasterUsername
      MasterUserPassword: !Ref DatabaseMasterPassword
      Tags:
      - Key: Name
        Value: !Ref DatabaseName
    DeletionPolicy: Snapshot
Outputs:
  DatabaseIdentifier:
    Description: DB Identifier
    Value:
      Fn::If:
      - IsClustered
      - !Ref DBCluster
      - !Ref DBInstanceStandalone
  DatabaseName:
    Description: DB Name
    Value: !Ref DatabaseName
  DatabaseMasterUsername:
    Description: DB Username
    Value: !Ref DatabaseMasterUsername
  DatabaseEndpointAddress:
    Description: DB Endpoint Address
    Value:
      Fn::If:
      - IsClustered
      - !Sub ${DBCluster.Endpoint.Address}
      - !Sub ${DBInstanceStandalone.Endpoint.Address}
  DatabaseEndpointPort:
    Description: DB Endpoint Port
    Value:
      Fn::If:
      - IsClustered
      - !Sub ${DBCluster.Endpoint.Port}
      - !Sub ${DBInstanceStandalone.Endpoint.Port}
