AWSTemplateFormatVersion: 2010-09-09
Description: AWS Service Broker - Amazon Polly (qs-1ob09h6a9)
Metadata:
  AWS::ServiceBroker::Specification:
    Version: 1.0
    Tags:
    - AWS
    - Polly
    - TTS
    - Speech
    Name: polly
    DisplayName: Amazon Polly
    LongDescription: Amazon Polly is a Text-to-Speech (TTS) cloud service that converts
      text into lifelike speech. You can use Amazon Polly to develop applications
      that increase engagement and accessibility. Amazon Polly supports multiple languages
      and includes a variety of lifelike voices, so you can build speech-enabled applications
      that work in multiple locations and use the ideal voice for your customers.
    ImageUrl: https://s3.amazonaws.com/awsservicebroker/icons/AmazonPolly_LARGE.png
    DocumentationUrl: https://aws.amazon.com/documentation/polly/
    ProviderDisplayName: Amazon Web Services
    ServicePlans:
      default:
        DisplayName: Standard
        Description: AWS Polly
        LongDescription: Enables use of AWS Polly Speech Synthesis
        Cost: https://aws.amazon.com/polly/pricing/
        ParameterValues: {}
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Polly Configuration
      Parameters:
      - LexiconPrefix
    ParameterLabels:
      LexiconPrefix:
        default: Lexicon Prefix
Parameters:
  LexiconPrefix:
    Description: Restrict the use of Polly lexicons to those with the specified prefix.
      If left blank all lexicons can be managed. The restriction applies to the SynthesizeSpeech,
      GetLexicon, PutLexicon and DeleteLexicon API's
    Type: String
    Default: ''
Resources:
  AWSSBInjectedIAMUserRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: iam_user_creation
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - iam:CreateAccessKey
            - iam:PutUserPolicy
            - iam:ListAttachedUserPolicies
            - iam:DeleteUserPolicy
            - iam:AttachUserPolicy
            - iam:DeleteUser
            - iam:ListUserPolicies
            - iam:DetachUserPolicy
            - iam:CreateUser
            - iam:DeleteAccessKey
            - iam:ListAccessKeys
            - ssm:DeleteParameters
            - ssm:PutParameter
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
  AWSSBInjectedIAMUserLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role:
        Fn::GetAtt:
        - AWSSBInjectedIAMUserRole
        - Arn
      Code:
        ZipFile: |-
          import cfnresponse
          import random
          import string
          import boto3
          import traceback
          alnum = string.ascii_uppercase + string.ascii_lowercase + string.digits
          iam_client = boto3.client('iam')
          ssm_client = boto3.client('ssm')
          def handler(event, context):
              response_code = cfnresponse.SUCCESS
              response_data = {}
              if event['RequestType'] == 'Create':
                  phys_id = ''.join(random.choice(alnum) for _ in range(16))
              else:
                  phys_id = event['PhysicalResourceId']
              response_data['AsbAccessKeyId'] = 'AsbAccessKeyId-%s' % phys_id
              response_data['AsbSecretAccessKey'] = 'AsbSecretAccessKey-%s' % phys_id
              try:
                  username = event['ResourceProperties']['Username']
                  if event['RequestType'] == 'Create':
                      response = iam_client.create_access_key(UserName=username)
                      aws_access_key_id = response['AccessKey']['AccessKeyId']
                      secret_access_key = response['AccessKey']['SecretAccessKey']
                      ssm_client.put_parameter(Name=response_data['AsbAccessKeyId'], Value=aws_access_key_id, Type='SecureString')
                      ssm_client.put_parameter(Name=response_data['AsbSecretAccessKey'], Value=secret_access_key, Type='SecureString')
                  elif event['RequestType'] == 'Update':
                      print('Update operation unsupported')
                      response_code = cfnresponse.FAILED
                  elif event['RequestType'] == 'Delete':
                      for access_key in iam_client.list_access_keys(UserName=username)['AccessKeyMetadata']:
                          iam_client.delete_access_key(UserName=username, AccessKeyId=access_key['AccessKeyId'])
                      ssm_client.delete_parameters(Names=[response_data['AsbAccessKeyId'], response_data['AsbSecretAccessKey']])
                  cfnresponse.send(event, context, response_code, response_data, phys_id)
              except Exception as e:
                  print(str(e))
                  traceback.print_exc()
                  cfnresponse.send(event, context, cfnresponse.FAILED, response_data, phys_id)
      Runtime: python2.7
      Timeout: '60'
  AWSSBInjectedIAMUser:
    Type: AWS::IAM::User
  AWSSBInjectedIAMUserCreator:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt AWSSBInjectedIAMUserLambda.Arn
      Username: !Ref AWSSBInjectedIAMUser
  AWSSBInjectedIAMUserPolicy1:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: AWSSBInjectedIAMUserPolicy1
      Users:
      - !Ref AWSSBInjectedIAMUser
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - polly:SynthesizeSpeech
          - polly:DeleteLexicon
          - polly:GetLexicon
          - polly:PutLexicon
          Resource: !Sub arn:aws:polly:${AWS::Region}:${AWS::AccountId}:lexicon/${LexiconPrefix}*
        - Effect: Allow
          Action:
          - polly:ListLexicons
          - polly:DescribeVoices
          Resource: '*'
Outputs:
  PollyLexiconPrefix:
    Description: Only lexicons with this prefix are available.
    Value: !Ref LexiconPrefix
  PollyAwsAccessKeyId:
    Value: !Sub "ssm:${AWSSBInjectedIAMUserCreator.AsbAccessKeyId}"
  PollyAwsSecretAccessKey:
    Value: !Sub "ssm:${AWSSBInjectedIAMUserCreator.AsbSecretAccessKey}"