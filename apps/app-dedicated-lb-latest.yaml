# This is a sample, non-production-ready template.
#
# © 2019 Amazon Web Services, In​c. or its affiliates. All Rights Reserved.
#
# This AWS Content is provided subject to the terms of the
# AWS Customer Agreement available at http://aws.amazon.com/agreement
# or other written agreement between Customer and either
# Amazon Web Services, Inc. or Amazon Web Services EMEA SARL or both.

AWSTemplateFormatVersion: "2010-09-09"
Description: Platform Service with Dedicated Load Balancer

Parameters:

  PlatformVPC:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Platform VPC
    Default: /gurum/platform/vpc

  PlatformPublicSubnets:
    Type: AWS::SSM::Parameter::Value<List<String>>
    Description: Platform Public Subnets
    Default: /gurum/platform/subnets/public

  PlatformPrivateSubnets:
    Type: AWS::SSM::Parameter::Value<List<String>>
    Description: Platform Private Subnets
    Default: /gurum/platform/subnets/private

  PlatformCluster:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Platform ECS Cluster
    Default: /gurum/platform/ecs

  DesiredCount:
    Description: How many instances of this task should we run across our cluster?
    Type: Number
    Default: 1

  Priority:
    Description: The Application Load Balancer rule priority
    Type: Number
    Default: 1

  HealthCheckPath:
    Description: The health check path to register with the Application Load Balancer
    Type: String
    Default: /health

  DockerImage:
    Description: Docker image to start the container with
    Type: String
    Default: nginx:latest

  HostedZoneName:
    Description: Name of the Hosted Zone to register service with
    Type: String
    Default: apps.gureu.me

Resources:

  Service:
    Type: AWS::ECS::Service
    DependsOn: ListenerRule
    Properties:
      ServiceName:
        Ref: AWS::StackName
      Cluster: !Ref PlatformCluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref TaskDefinition
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: web
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !GetAtt ApplicationServiceSecurityGroup.GroupId
          Subnets: !Ref PlatformPrivateSubnets

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family:
        Ref: AWS::StackName
      Cpu: "1024"
      Memory: "2048"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ApplicationContainerRole.Arn
      ContainerDefinitions:
        - Name: web
          Essential: true
          Image: !Ref DockerImage
          Memory: 128
          PortMappings:
            - ContainerPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
                awslogs-group: !Sub 'platform-app-${AWS::StackName}'
                awslogs-region: !Ref AWS::Region
                awslogs-stream-prefix: !Ref AWS::StackName

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub 'platform-app-${AWS::StackName}'
      RetentionInDays: 365

  ApplicationServiceSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: !Sub 'platform-sg-${AWS::StackName}'
      GroupDescription: !Sub '(${AWS::StackName}) Application Service SG'
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp
      VpcId: !Ref PlatformVPC

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name:
        Ref: AWS::StackName
      TargetType: ip
      Port: 80
      Protocol: HTTP
      VpcId: !Ref PlatformVPC
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "50"
      Matcher:
          HttpCode: 200-299
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: !Ref HealthCheckPath
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref LoadBalancerListener
      Priority: !Ref Priority
      Conditions:
        - Field: host-header
          Values:
            - !Join ['', [!Ref 'AWS::StackName', ., !Ref 'HostedZoneName']]
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward

  ServiceDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Join ['', [!Ref 'HostedZoneName', .]]
      Comment: !Sub 'DNS Record for ${AWS::StackName}'
      Name: !Join ['', [!Ref 'AWS::StackName', ., !Ref 'HostedZoneName']]
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
        DNSName: !GetAtt LoadBalancer.DNSName

  ApplicationContainerRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub 'platform-role-${AWS::StackName}'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      AssumeRolePolicyDocument:
        Version: "2008-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole

  ############################
  # Load Balancer Definition #
  ############################

  LoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name:
        Ref: AWS::StackName
      SecurityGroups:
        - !GetAtt LoadBalancerSecurityGroup.GroupId
      Subnets: !Ref PlatformPublicSubnets

  LoadBalancerSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: !Sub 'LoadBalancerSecurityGroup-${AWS::StackName}'
      GroupDescription: !Sub 'LoadBalancer Security Group (${AWS::StackName})'
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp
        - CidrIp: "0.0.0.0/0"
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
      VpcId: !Ref PlatformVPC

  LoadBalancerListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - TargetGroupArn:
            Ref: TargetGroup
          Type: forward

Outputs:
  Endpoint:
    Value: !Join ['', [!Ref 'AWS::StackName', ., !Ref 'HostedZoneName']]