# This is a sample, non-production-ready template.
#
# © 2019 Amazon Web Services, In​c. or its affiliates. All Rights Reserved.
#
# This AWS Content is provided subject to the terms of the
# AWS Customer Agreement available at http://aws.amazon.com/agreement
# or other written agreement between Customer and either
# Amazon Web Services, Inc. or Amazon Web Services EMEA SARL or both.

AWSTemplateFormatVersion: "2010-09-09"
Description: Pipeline for deployment apps

Parameters:
  GitHubRepo:
    Type: String

  GitHubBranch:
    Type: String

  GitHubToken:
    Type: String
    NoEcho: true

  GitHubUser:
    Type: String

  ServiceName:
    Type: String
    Description: Name of your service, this will also become the Stack Name in each account.

  DeploymentRoleName:
    Type: String
    Description: IAM Role Name for the deployment role CodePipeline assumes to exceute the CloudFormation Template.
    Default: cloudformation-deployment-role

  DelegationRoleName:
    Type: String
    Description: IAM Role Name for CodePipeline to delegate execution of the CloudFormation Template.
    Default: cloudformation-delegation-role

  DevAccountId:
    Type: String
    Description: (Optional) 12-digit AWS Account ID
    Default: ""

  TestAccountId:
    Type: String
    Description: (Optional) 12-digit AWS Account ID
    Default: ""

  ProdAccountId:
    Type: String
    Description: 12-digit AWS Account ID

Conditions:
  DevStageExist: !Not [!Equals ["", !Ref DevAccountId ]]
  TestStageExist: !Not [!Equals ["", !Ref TestAccountId ]]
  AddApproval: !Or [ !Condition DevStageExist, !Condition TestStageExist ]

Resources:
  Repository:
    Type: AWS::ECR::Repository
    DeletionPolicy: Delete
    Properties:
      RepositoryPolicyText: 
        Version: "2012-10-17"
        Statement: 
          - 
            Sid: AllowPushPull
            Effect: Allow
            Principal: 
              AWS: 
                - !If
                  - DevStageExist
                  - !Sub arn:aws:iam::${DevAccountId}:root
                  - !Ref AWS::NoValue
                - !If
                  - TestStageExist
                  - !Sub arn:aws:iam::${TestAccountId}:root
                  - !Ref AWS::NoValue
                - !Sub arn:aws:iam::${ProdAccountId}:root
            Action: 
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchCheckLayerAvailability
              - ecr:BatchGetImage

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: !Sub arn:aws:s3:::${ArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetObjectVersion
              - Resource: !GetAtt KMSKey.Arn
                Effect: Allow
                Sid: "KMS"
                Action:
                  - "kms:Decrypt"
                  - "kms:DescribeKey"
                  - "kms:Encrypt"
                  - "kms:GenerateDataKey*"
                  - "kms:ReEncrypt*"
              - Resource: "*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ecr:GetAuthorizationToken
              - Resource: !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${Repository}
                Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: !Sub arn:aws:s3:::${ArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
              - Resource: !GetAtt KMSKey.Arn
                Effect: Allow
                Sid: "KMS"
                Action:
                  - "kms:Decrypt"
                  - "kms:DescribeKey"
                  - "kms:Encrypt"
                  - "kms:GenerateDataKey*"
                  - "kms:ReEncrypt*"
              - Resource: "*"
                Effect: Allow
                Action:
                  - codepipeline:*
                  - codecommit:List*
                  - codecommit:Get*
                  - codecommit:GitPull
                  - codecommit:UploadArchive
                  - codecommit:CancelUploadArchive
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                  - cloudformation:Describe*
                  - cloudFormation:List*
                  - s3:ListAllMyBuckets
                  - s3:GetBucketLocation
              - Resource:
                  - !If
                    - DevStageExist
                    - !Sub arn:aws:iam::${DevAccountId}:role/${DelegationRoleName}
                    - !Ref AWS::NoValue
                  - !If
                    - TestStageExist
                    - !Sub arn:aws:iam::${TestAccountId}:role/${DelegationRoleName}
                    - !Ref AWS::NoValue
                  - !Sub arn:aws:iam::${ProdAccountId}:role/${DelegationRoleName}
                Effect: Allow
                Action: sts:AssumeRole

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                docker: 18
            pre_build:
              commands:
                - $(aws ecr get-login --no-include-email)
                - TAG="$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)"
                - IMAGE_URI="${REPOSITORY_URI}:${TAG}"
                - docker pull $IMAGE_URI || true
            build:
              commands:
                - docker build --cache-from $IMAGE_URI --tag "$IMAGE_URI" .
            post_build:
              commands:
                - docker push "$IMAGE_URI"
                - printf '{"name":"web","imageUri":"%s"}' "$IMAGE_URI" > images.json
          artifacts:
            files:
              - images.json
              - template.yaml
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:2.0
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Repository}
      Name: !Ref AWS::StackName
      EncryptionKey: !GetAtt KMSKey.Arn
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
        EncryptionKey:
          Id: !Ref KMSKey
          Type: KMS
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: "1"
                Provider: GitHub
              Configuration:
                Owner: !Ref GitHubUser
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubToken
              OutputArtifacts:
                - Name: App
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: ContainerBuild
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: App
              OutputArtifacts:
                - Name: BuildOutput
              RunOrder: 1
        - !If
          - DevStageExist
          - Name: Development
            Actions:
              - Name: DeployDev
                ActionTypeId:
                  Category: Deploy
                  Owner: AWS
                  Provider: CloudFormation
                  Version: '1'
                Configuration:
                  ActionMode: REPLACE_ON_FAILURE
                  Capabilities: CAPABILITY_NAMED_IAM
                  ParameterOverrides: |
                    {
                      "DockerImage" : { "Fn::GetParam" : ["BuildOutput","images.json","imageUri"] }
                    }
                  StackName: !Ref ServiceName
                  RoleArn: !Sub 'arn:aws:iam::${DevAccountId}:role/${DeploymentRoleName}'
                  TemplatePath: 'BuildOutput::template.yaml'
                InputArtifacts:
                  - Name: BuildOutput
                RunOrder: 1
                RoleArn: !Sub 'arn:aws:iam::${DevAccountId}:role/${DelegationRoleName}'
          - !Ref AWS::NoValue
        - !If
          - TestStageExist
          - Name: Test
            Actions:
              - Name: DeployTest
                ActionTypeId:
                  Category: Deploy
                  Owner: AWS
                  Provider: CloudFormation
                  Version: '1'
                Configuration:
                  ActionMode: REPLACE_ON_FAILURE
                  Capabilities: CAPABILITY_NAMED_IAM
                  ParameterOverrides: |
                    {
                      "DockerImage" : { "Fn::GetParam" : ["BuildOutput","images.json","imageUri"] }
                    }
                  StackName: !Ref ServiceName
                  RoleArn: !Sub 'arn:aws:iam::${TestAccountId}:role/${DeploymentRoleName}'
                  TemplatePath: 'BuildOutput::template.yaml'
                InputArtifacts:
                  - Name: BuildOutput
                RunOrder: 1
                RoleArn: !Sub 'arn:aws:iam::${TestAccountId}:role/${DelegationRoleName}'
          - !Ref AWS::NoValue
        - !If
          - AddApproval
          - Name: ApprovalStage
            Actions:
              - Name: Approval
                ActionTypeId:
                    Category: Approval
                    Owner: AWS
                    Version: "1"
                    Provider: Manual
          - !Ref AWS::NoValue
        - Name: Production
          Actions:
            - Name: DeployProd
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Configuration:
                ActionMode: REPLACE_ON_FAILURE
                Capabilities: CAPABILITY_NAMED_IAM
                ParameterOverrides: |
                  {
                    "DockerImage" : { "Fn::GetParam" : ["BuildOutput","images.json","imageUri"] }
                  }
                StackName: !Ref ServiceName
                RoleArn: !Sub 'arn:aws:iam::${ProdAccountId}:role/${DeploymentRoleName}'
                TemplatePath: 'BuildOutput::template.yaml'
              InputArtifacts:
                - Name: BuildOutput
              RunOrder: 1
              RoleArn: !Sub 'arn:aws:iam::${ProdAccountId}:role/${DelegationRoleName}'

  Webhook:
    Type: 'AWS::CodePipeline::Webhook'
    Properties:
      AuthenticationConfiguration:
        SecretToken: secret
      Filters:
      - JsonPath: "$.ref"
        MatchEquals: refs/heads/{Branch}
      Authentication: GITHUB_HMAC
      TargetPipeline: !Ref Pipeline
      TargetAction: Source
      TargetPipelineVersion: !GetAtt Pipeline.Version
      RegisterWithThirdParty: true

Outputs:

  PipelineName:
    Value: !Sub ${Pipeline}
